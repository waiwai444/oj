The naive algorithm for this problem ran in 1.8s in uva 10212. It's too slow. In fact, there is a much more efficient algorithm, as shown below.

We consider n! first. To get the last non-zero digit of n!, firstly we need to get rid of all 2's and 5's. Of course, there may be different numbers of 2's and 5's, and we need to multiply those additional 2's or 5's back to the result in the end.

Given n! = 1*2*3*4*5*6*7*8*9*10*...*n, each even number has at least one 2. If we divide them by 2, we get 1*1*3*2*5*3*7*4*9*5*.... We can find that those even numbers become another sequence of 1,2,3,4,5,.... We can count 2's in this subsequence again. This shows us a recursive method to count the number of all 2's in n!. The same method applies for counting 5's.

After removing all 2's and 5's, all the remaining numbers have their last digit being among {1, 3, 7, 9}. For example, the sequence shown above becomes 1*1*3*1*1*3*7*1*9*1*.... And we need to compute the last digit of the product of these remaining numbers. We only need to consider those numbers with last digit being among {3, 7, 9}. So, how many numbers are there remained with the last digit being 3? We can find an iterative equation to compute it.

Let f(n, d) be the number of numbers less than or equal to n whose last digit, after stripped all 2's and 5's, is d. Since all odd numbers are unchanged except for those multiples of 5, and all 2's in even numbers are stripped, we can consider the numbers in odd positions and those in even positions separately, that is, subsequence 1,3,5,7,9,..., and 2,4,6,8,10,.... For the even subsequence, after stripped one 2 for each even number, it becomes a same case with a half size. For the odd subsequence, it can be divided into two parts again: 1,3,7,9,11,13,..., and 5,15,25,.... It's easy to count the number of numbers with the last digit d in the subsequence 1,3,7,9,.... And for 5,15,25,..., we can divide them by 5 and we get 1,3,5,7,9... again.

So, let g(n, d) be the number of odd numbers less than or equal to n whose last digit, after stripped all 2's and 5's, is d. We have f(n, d) = f(n/2, d) + g(n, d), and g(n, d) = n/10+(n%10>=d)+g(n/5, d).

Since P(n, m) = n!/(n-m)!, directly subtracting those countings for n! and those for (n-m)! will generate the countings we need.

And finally, we can easily compute the answer by modulo arithmetic. See the code for details.

0.000s in uva 10212
0.000s in poj 1150
