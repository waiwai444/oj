Backtrack

In this problem, I used a relatively slow backtracking algorithm. It records the state of each diagonal. For n*n chessboard, there are 2*n-1 diagonals. My algorithm first backtrack all diagonals with odd numbering, then all diagonals with even numbering, which represents the independency of white bishops and black bishops. It costs 0.976sec in UVa. Quite poor but still acceptable. 
There is also better algorithms without backtracking (the rook polynomial?). 

The following code is a little bit cheating. It costs only 0.024sec in UVa.
====================================================================================================
#include <iostream>

using namespace std;

int table[8][16] = {
	{1},
	{4, 4, 0},
	{9, 26, 26, 8, 0},
	{16, 92, 232, 260, 112, 16, 0},
	{25, 240, 1124, 2728, 3368, 1960, 440, 32, 0},
	{36, 520, 3896, 16428, 39680, 53744, 38368, 12944, 1600, 64, 0},
	{49, 994, 10894, 70792, 282248, 692320, 1022320, 867328, 389312, 81184, 5792, 128, 0},
	{64, 1736, 26192, 242856, 1444928, 5599888, 14082528, 22522960, 22057472, 12448832, 3672448, 489536, 20224, 256, 0}
};

int main()
{
	int n, k;
	while(cin>>n>>k && (n || k))
	{
		if(k==0)
			cout<<1<<endl;
		else if(k==1)
			cout<<n*n<<endl;
		else if(k>=n+n-1)
			cout<<0<<endl;
		else
			cout<<table[n-1][k-1]<<endl;
	}
	return 0;
}
====================================================================================================