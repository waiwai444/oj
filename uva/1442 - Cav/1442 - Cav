Scan the cave from left to right, record left walls in a stack, and update the current lowest ceil in the current pond. Once hit a right wall, calculate the area from it back to left walls. And once both sides of the pond are higher than the current lowest ceil, finish the current pond and remove all left walls from the stack and start from the next position and an empty stack of left walls. See the code for details.

0.170s

Another algorithm, found from the internet and is much simpler to implement, is to scan the cave twice, one from left to right, and the other from right back to left. The first scan updates the height limit imposed by the current and the previous floor and ceil, and the second scan updates the height limit introduced from the right side floor and ceil. See my implementation below. But this code is not faster than my original one since both algorithms are O(n). It also runs in about 0.170 or 0.180s.

==========

#include <stdio.h>
#include <algorithm>

int n;
int p[1000000];
int s[1000000];
int h[1000000];

int solve()
{
    int i, l, sum = 0;

    l = s[0];
    for(i = 0; i < n; ++i)
    {
        if(p[i] > l)
            l = p[i];
        else if(s[i] < l)
            l = s[i];
        h[i] = l;
    }
    for(i = n-1; i >= 0; --i)
    {
        if(p[i] > l)
            l = p[i];
        else if(h[i] < l)
            l = h[i];
        sum += std::min(l, h[i])-p[i];
    }

    return sum;
}

int main()
{
    int i, Z;
    scanf("%d", &Z);
    while(Z--)
    {
        scanf("%d", &n);
        for(i = 0; i < n; ++i)
            scanf("%d", &p[i]);
        for(i = 0; i < n; ++i)
            scanf("%d", &s[i]);
        printf("%d\n", solve());
    }
    return 0;
}

==========
