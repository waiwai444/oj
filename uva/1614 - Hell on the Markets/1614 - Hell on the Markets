We have the following observations.

#1. For any i and any number x between 1 and i, we can always find a subset in a[1] to a[i] whose sum equals to that number x.

It's trivial for i = 1.
For i > 1, assume it's satisfied for i-1. Then if a[i] = x, then we just use a[i]. If a[i] < x, then we can always find a subset in a[1] to a[i-1] whose sum equals to x-a[i] according to the assumption, and if a[i] > x, then similarly we can find a subset whose sum equals to x according to the assumption.

#2. For any i and any number between 1 and sum[i], we can always find a subset in a[1] to a[i] whose sum equals to that number.

It's trivial for i = 1.
For i > 1, assume it's satisfied for i-1. Then for i, we can see that it's always possible to find a subset whose sum equals to any number between sum[i-1]+1 to sum[i]-1. This is because, for any number j between 1 and a[i]-1, we can always find a subset in a[1] to a[i-1] whose sum equals j, according to #1. So, by subtracting this subset from the entire set a[1] to a[i], the sum will be sum[i]-j, and sum[i-1]+1 = sum[i]-a[i]+1 <= sum[i]-j <= sum[i]-1.

So, the answer for "yes" or "no" in this problem becomes a very easy question: is sum[n] even or odd? If it's even, then we can always find a subset in a[i] to a[n] whose sum is sum[n]/2.

And here is the algorithm to assign 1 or -1 when the answer is "yes". We just traverse the array from a[n] back to a[1], and try to add a[i] to the result set if the sum of the current result set sum S[i] and a[i] doesn't exceed sum[n]/2.

To see the correctness of this simple greedy algorithm, we have the following observations. (R[i] is the remaining space after processed i)
1. If a[i] cannot be added to the result set, we can safely skip it.
  This is because it means S[i]+a[i] > sum[n]/2. The remaining space after skipping it is still sum[n]/2-S[i] < a[i] <= i. So, we have R[i] <= i-1. So, there must have a subset in a[1] to a[i-1] whose sum equals to R[i].
2. If a[i] can be added and is added, we can see that after added it, the remaining space R[i] must either have R[i] < sum[i-1]/2, or R[i] <= i-1, and acccording to #1 and #2 both cases can be filled by a subset in a[1] to a[i-1]. We use induction.
  2.1. When i = n, R[n] = sum[n]/2-a[n] < (sum[n]-a[n])/2 = sum[n-1]/2. So, R[n] < sum[n-1]/2. (a[n] is always less than or equal to sum[n]/2)
  2.2. Assume for some i < n, R[i+1] < sum[i+1-1]/2. Then R[i] = R[i+1]-a[i] < sum[i+1-1]/2-a[i] < (sum[i]-a[i])/2 = sum[i-1]/2.
  2.3. Assume for some i < n, R[i+1] <= i+1-1. Then R[i] = R[i+1]-a[i] <= i-a[i] <= i-1.

My final implementation is based on this algorithm. It's time complexity is O(n). But it's running time in uva is weird. Most of the times it ran for about 0.420s, but it's best time in all my submissions is 0.200s, without any code change. (It's even slower in most of the times than my original code which uses an O(nlogn) algorithm, as shown in below.)

0.200s

==========
The following is my original code. It needs to sort the array first and pick a[i] in the same order as the above better algoroithm (descending order). It counts the sums of two subsets while adding each a[i] into one of the subsets. When adding a[i], we always add it to the subset with less sum.

Its correctness is also easy to see. If there is a solution that needs to add a[i] to the subset with larger sum, then we can simply exchange it with those numbers in the positions in the other set that we may use in our algorithm. This exchange will leave some "holes" in these two subsets, but according to #1, we can easily rearrange them to make these two subsets still equal. It's easy and not important here so I don't drill down into it.

0.240s
==========
#include <algorithm>
#include <stdio.h>

int n;
int a[100001];
int idx[100001];
int ans[100001];

bool cmp_idx(int i, int j)
{
    return a[i] > a[j];
}

void solve()
{
    int i, sp = 0, sn = 0;
    std::sort(&idx[0], &idx[n], cmp_idx);
    for(i = 0; i < n; ++i)
    {
        if(sp > sn)
        {
            sn += a[idx[i]];
            ans[idx[i]] = -1;
        }
        else
        {
            sp += a[idx[i]];
            ans[idx[i]] = 1;
        }
    }

    if(sp == sn)
    {
        printf("Yes\n%d", ans[0]);
        for(i = 1; i < n; ++i)
            printf(" %d", ans[i]);
        printf("\n");
    }
    else
    {
        printf("No\n");
    }
}

int main()
{
    int i;
    while(scanf("%d", &n) != EOF)
    {
        for(i = 0; i < n; ++i)
        {
            scanf("%d", &a[i]);
            idx[i] = i;
        }
        solve();
    }
    return 0;
}
==========
