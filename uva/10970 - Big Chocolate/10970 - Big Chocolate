====================================================================================================
The following code uses DP to solve this problem.
In fact, given (m,n), all cut will cause the same result. (So I commented out the third loop in my code.)
To prove this, assume it's true for all smaller pieces cut from (m,n). If the first cut is vertical at some point i, then the total number of cuts c(m,n) = c(m,i)+c(m,n-i)+1. According to the assumption, we can easily conclude that c(m,n) = c(m,i-1)+c(m,n-i+1)+1 (assume i>1). That is, if the first cut is vertical, no matter where it is, the results are the same. If the first cut is horizontal, then c(m,n) = c(i,n)+c(m-i,n)+1. Also according to the assumption, we can put the second cuts for both smaller pieces at the same vertical position, and the result is equivalent to cut the first cut at this vertical position and then cut both smaller pieces at that same horizontal position. So, if the assumption is true, given (m,n), we can cut any position and the results are all the same. And finally, the base condition is trivial. 

The following code ran in 0.039s in uva. (0.073s without commented out)
====================================================================================================
#include <stdio.h>

int dptable[301][301];

int main()
{
	int i, j, k, m, n, s, t;
	for(i = 2; i <= 300; i++)
	{
		dptable[1][i] = dptable[1][i-1]+1;
		dptable[i][1] = dptable[i-1][1]+1;
	}
	for(i = 2; i <= 300; i++)
	{
		for(j = 2; j <= 300; j++)
		{
			s = dptable[i][1]+dptable[i][j-1]+1;
			/*for(k = 2; k <= j/2; k++)
				if((t = dptable[i][k]+dptable[i][j-k]+1) < s)
					s = t;
			for(k = 1; k <= i/2; k++)
				if((t = dptable[k][j]+dptable[i-k][j]+1) < s)
					s = t;*/
			dptable[i][j] = s;
		}
	}
	while(scanf("%d%d", &m, &n) != EOF)
		printf("%d\n", dptable[m][n]);
	return 0;
}
====================================================================================================

Since any cut will lead to the same result, we can simplify the code further as in the cpp file. It ran in uva in 0.038s. (In fact, not much faster than the previous method here.)


