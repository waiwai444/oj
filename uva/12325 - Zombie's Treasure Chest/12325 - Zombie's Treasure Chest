It's also a kind of complete knapsack problem. It's solution, however, is completely different from normal complete knapsack problem. That is because the maximum value for the capacity of the knapsack may be as large as a 32-bit signed integer. So the traditional DP based algorithm doesn't work.

But the good news is that there are only two different items.

The solution here is use a bruteforce algorithm, enumerating all possible combinitions, but with different ways under different situations.

Since the maximum capacity of the treasure chest N and the maximum item size S1/S2 vary tremendously, with the difference being even more than one billion, so we need to consider the ways of enumeration under two situations.

The first one is that the ratio of N and max(S1, S2) is small enough, then we can enumerate on the number of that item.

The second case is that the ratios of N and both S1 and S2 are large enough. That means both S1 and S2 are small enough. On the other hand, it's obvious that the total size of S2 numbers of item 1 equals to that of S1 numbers of item2. If S2*V1 < S1*V2, then there should only have less than S2 numbers of item 1 in the optimum solution, otherwise we can replace them with S1 numbers of item 2, which will increase the total value. And vice versa. And don't forget the case S2*V1 = S1*V2. See the code for details.

The time complexity is O(sqrt(n)).

0.000s in uva 12325
0.003s in la 5703
