longest increasing subsequence

====================================================================================================
The code in the cpp file uses the O(nlogn) DP algorithm. It records the minimum last value of subsequences of length k in dp[k], and update this DP table with each value in the input array by binary search. Refer to [1].
0.013s in uva (111)
====================================================================================================

====================================================================================================
The following code uses the naive O(n^2) DP algorithm, which records the longest subsequence ending at the current position.
0.013s in uva (111)
====================================================================================================
#include <stdio.h>

int n;
int rank[20], stu_ord[20];
int dp[20];

int main()
{
	int i, j, ans, max;
	scanf("%d", &n);
	for(i = 0; i < n; i++)
		scanf("%d", &rank[i]);
	while(scanf("%d", &ans) != EOF)
	{
		stu_ord[ans-1] = rank[0];
		for(i = 1; i < n; i++)
		{
			scanf("%d", &ans);
			stu_ord[ans-1] = rank[i];
		}
		
		dp[0] = 1;
		max = 1;
		for(i = 1; i < n; i++)
		{
			dp[i] = 1;
			for(j = i-1; j >= 0; j--)
				if(stu_ord[j] < stu_ord[i] && dp[j] >= dp[i])
				{
					dp[i] = dp[j]+1;
					if(dp[i] > max)
						max = dp[i];
				}
		}
		
		printf("%d\n", max);
	}
	return 0;
}
====================================================================================================

[1] http://en.wikipedia.org/wiki/Longest_increasing_subsequence

