quadtree

I use the recursive method to construct quadtrees, and then use another recursive method to count the black.

The code in the cpp file ran in uva in 0.012s.

====================================================================================================
The following code and the code in the cpp file are both implemented as described as above. The difference between them is that the code in the cpp file considers the case that if one node of a tree is 'e', then the number of black pixels of the merged picture will be known. The code here doesn't take this into account so that it will continue to recur under this case. It ran in uva in 0.015s. 
====================================================================================================
#include <stdio.h>

struct quad_tree
{
	quad_tree *rt, *lt, *lb, *rb;
	char type;
	int width;
};

int create_tree(quad_tree tree[], char str[], int pos, int width)
{
	int new_pos;
	tree[pos].type = str[pos];
	tree[pos].width = width;
	if(str[pos] == 'p')
	{
		tree[pos].rt = &tree[pos+1];
		new_pos = create_tree(tree, str, pos+1, width/2);
		tree[pos].lt = &tree[new_pos];
		new_pos = create_tree(tree, str, new_pos, width/2);
		tree[pos].lb = &tree[new_pos];
		new_pos = create_tree(tree, str, new_pos, width/2);
		tree[pos].rb = &tree[new_pos];
		new_pos = create_tree(tree, str, new_pos, width/2);
		return new_pos;
	}
	else
		return pos+1;
}

quad_tree tree1[1500], tree2[1500];

int count_black(quad_tree *tree_node1, quad_tree *tree_node2)
{
	if(tree_node1->type == 'f')
		return tree_node1->width*tree_node1->width;
	if(tree_node2->type == 'f')
		return tree_node2->width*tree_node2->width;
	if(tree_node1->type == 'e' && tree_node2->type == 'e')
		return 0;
	int sum = count_black(tree_node1->type == 'p' ? tree_node1->rt : tree_node1, tree_node2->type == 'p' ? tree_node2->rt : tree_node2);
	sum += count_black(tree_node1->type == 'p' ? tree_node1->lt : tree_node1, tree_node2->type == 'p' ? tree_node2->lt : tree_node2);
	sum += count_black(tree_node1->type == 'p' ? tree_node1->lb : tree_node1, tree_node2->type == 'p' ? tree_node2->lb : tree_node2);
	sum += count_black(tree_node1->type == 'p' ? tree_node1->rb : tree_node1, tree_node2->type == 'p' ? tree_node2->rb : tree_node2);
	return sum;
}

int main()
{
	int tc;
	char str1[1500], str2[1500];
	scanf("%d", &tc);
	while(tc--)
	{
		scanf("%s%s", str1, str2);
		create_tree(tree1, str1, 0, 32);
		create_tree(tree2, str2, 0, 32);
		printf("There are %d black pixels.\n", count_black(tree1, tree2));
	}
	return 0;
}
====================================================================================================