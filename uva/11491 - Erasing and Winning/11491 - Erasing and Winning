Denote the input number digit array as I, and the answer number digit array as A.

Traverse I from the most siginicant digit (I[0]) and record the partial answer in A from the same order. For each input digit I[i], compare it with the current rightmost answer digit A[j]. If I[i] > A[j], then pop out A[j] and then continue comparing I[i] with A[j-1] until I[i] <= A[j-k] or the position j-k is too far to the left for I[i]. Put I[i] into A[j-k+1]. For "too far to the left", it means that we cannot put I[i] too far to the left in the answer array A, otherwise we will not have enough digits remaining in I to satisfy an answer number with N-D digits. So, when traverse back the array A and popping out digits, we need to check if I[i] can be put into that place in A. If it's not, we will also stop the back traversal.

This algorithm is much intuitive. To prove the correctness of this algorithm, assume that this algorithm generate a number A and there is a larger number A', and let i be the index of the leftmost position where A and A' are different. Then we have A[i] < A'[i]. Assume A[i] is I[j] and A'[i] is I[k], then I[j] < I[k]. If k > j, then it means in our algorithm after we put I[j] into A temporarily, we will finally find another digit that is larger that I[j] in the range (j, k], and change A[i] from I[j] to the larger one. If k < j, then firstly we can safely assume all A[0]..A[i-1] are from I[0]..I[k-1] because of our algorithm's criterion to push and pop digits. Then after our algorithm reaches I[k] and push it into A, we won't have any chance to replace it with I[j].

The time complexity of this algorithm is O(n), since each digit will be pushed into A once and be popped out at most once during the loop.

0.000s


==================================================
My original solution for this problem is a slower one. It first sorts the input digits descendingly, and then check each digit in descending order to decide which position it can be put into A to make the result largest. The most cost of this algorithm is the sorting, which we need to use a stable sorting.

Here is the code. It ran 0.050s.
==================================================

#include <algorithm>
#include <stdio.h>

int n, d;
char num[100001];
char ans[100001];
int idx[100001];

bool cmp(int i, int j)
{
    return num[i] > num[j];
}

void solve()
{
    int i, j, p = 0;

    for(i = 0; i < n; ++i)
        idx[i] = i, ans[i] = 0;

    std::stable_sort(&idx[0], &idx[n], cmp);

    for(i = j = 0; i < n && j < n-d; ++i)
    {
        if(idx[i] < p)
            continue;
        if(idx[i] < d+j)
        {
            ans[j++] = num[idx[i]];
            if(ans[j])
                break;
            p = idx[i]+1;
        }
        else if(idx[i] == d+j)
        {
            ans[j] = num[idx[i]];
            break;
        }
        else
        {
            ans[idx[i]-d] = num[idx[i]];
        }
    }
    for(; j < n-d; ++j)
        ans[j] = num[d+j];
    ans[n-d] = 0;
}

int main()
{
    while(1)
    {
        scanf("%d%d", &n, &d);
        if(n == 0 && d == 0)
            break;
        scanf("%s", num);
        solve();
        printf("%s\n", ans);
    }
    return 0;
}
==================================================
