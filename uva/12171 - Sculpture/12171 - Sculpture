First, discretize boxes into a grid: we number distinct x, y, and z values of the vertex coordinates of boxes respectively, and use them as the indices into the cells of that grid.
For example, if we have a box of (1,1,1,2,2,2), i.e. a box located at (1,1,1) with dimensions (2,2,2), then the whole space is saparated into 27 parts, and each part is represented as a cell in the grid. The map between the parts of the original space (represented by their minimum-coordinates vertices) and the cells in the grid is as follows:
  (0,0,0) <-> (0,0,0)
  (1,0,0) <-> (1,0,0)
  (3,0,0) <-> (2,0,0)
  (0,1,0) <-> (0,1,0)
  (1,1,0) <-> (1,1,0)
  (3,1,0) <-> (2,1,0)
  (0,3,0) <-> (0,2,0)
  (1,3,0) <-> (1,2,0)
  (3,3,0) <-> (2,2,0)
  (0,0,1) <-> (0,0,1)
  (1,0,1) <-> (1,0,1)
  (3,0,1) <-> (2,0,1)
  ...
  (3,3,3) <-> (2,2,2)

Then, we can use the floodfill algorithm in this grid to compute the external volumn and the area of the surface.

See the code for details.

0.050s in uva 12171
0.093s in la 4291
