math, factorial, big integer

A simple big number problem.

====================================================================================================
The following code calculates factorials independently, even if a smaller result has been calculated before. 
1.619s in uva
====================================================================================================
#include <stdio.h>

char result[3000];
int ndigit;

int main()
{
    int i, x, n, carry, temp;
    while(scanf("%d", &n) != EOF)
    {
        result[0] = 1;
        ndigit = 1;
        for(x = 2; x <= n; x++)
        {
            carry = 0;
            for(i = 0; i < ndigit; i++)
            {
                temp = result[i]*x+carry;
                result[i] = temp%10;
                carry = temp/10;
            }
            while(carry > 0)
            {
                result[ndigit++] = carry%10;
                carry /= 10;
            }
        }
        if(ndigit%2 == 1)
            result[ndigit/2] += '0';
        for(i = ndigit/2-1; i >= 0; i--)
        {
            char t = result[i];
            result[i] = result[ndigit-i-1];
            result[ndigit-i-1] = t;
            result[i] += '0';
            result[ndigit-i-1] += '0';
        }
        result[ndigit] = '\0';
        printf("%d!\n%s\n", n, result);
    }
    return 0;
}
====================================================================================================

The code in the cpp file precalcualtes all factorials up to the upper bound. 
Two WAs due to ignoring 0!...
0.036s in uva.
