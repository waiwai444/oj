Use IDDFS with some pruning.

One kind of pruning is only to move backwards because of symmetry.
The other way to pruning is not to split two adjacent numbers that are already in order, that is, a[i-1]+1 == a[i]. Since this operation will not lead to a better solution, but one more step later to re-join them back.
And finally, we consider the number of adjacent numbers that are not in order. For the target permutation, this number is zero. And each time we move a group of numbers, this number will at most reduced by 3. So we can make use of this factor to stop those search paths earlier that are impossible to make this number reach zero within the depth limit.

0.050s in uva 11212


PS. Some solutions in the Internet make use of the factor that the maximum answer will not exceed 5. I don't know whether it's true for all possible cases, so I didn't use it.


Other solutions:
==========
The following code use bi-directional BFS and Cantor expansion.
0.170s in uva 11212
==========
#include <cstdio>
#include <cstring>
#include <queue>

const int F[10] = { 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880 };

int n;
int init[10];

int dist[2][3628800];

struct perm_t
{
    char a[10];
};

int cantor_expansion(char *a)
{
    int i, j, s, r = 0;
    for(i = 0; i < n; ++i)
    {
        s = 0;
        for(j = n-1; j > i; --j)
            if(a[j] < a[i])
                ++s;
        r += s*F[n-i-1];
    }
    return r;
}

int search(std::queue<perm_t> *Q, int cnt, int *next_cnt, int dir)
{
    int idx, i, j, k, s;
    perm_t p, q;
    *next_cnt = 0;
    while(!Q->empty() && cnt--)
    {
        p = Q->front(), Q->pop();
        idx = cantor_expansion(p.a);
        if(dist[1-dir][idx] != -1)
            return idx;
        s = dist[dir][idx];
        for(i = 0; i < n; ++i)
        {
            for(j = i+1; j < n; ++j)
            {
                q = p;
                for(k = 1; k <= n-j; ++k)
                {
                    std::memcpy(&q.a[i], &p.a[i+k], j-i);
                    std::memcpy(&q.a[j], &p.a[i], k);
                    idx = cantor_expansion(q.a);
                    if(dist[dir][idx] == -1)
                    {
                        dist[dir][idx] = s+1;
                        Q->push(q);
                        ++*next_cnt;
                    }
                }
            }
        }
    }
    return -1;
}

int bbfs()
{
    int i, c[2];
    perm_t p, q;
    std::queue<perm_t> Q[2];
    std::memset(dist, -1, sizeof(dist));
    for(i = 0; i < n; ++i)
        p.a[i] = init[i], q.a[i] = i+1;
    dist[0][cantor_expansion(p.a)] = dist[1][cantor_expansion(q.a)] = 0;
    Q[0].push(p), Q[1].push(q);
    c[0] = c[1] = 1;
    while(!Q[0].empty() && !Q[1].empty())
    {
        if((i = search(&Q[0], c[0], &c[0], 0)) >= 0)
            return dist[0][i]+dist[1][i];
        if((i = search(&Q[1], c[1], &c[1], 1)) >= 0)
            return dist[0][i]+dist[1][i];
    }
    return -1;
}

int main()
{
    int i, tc = 0;
    while(std::scanf("%d", &n), n)
    {
        for(i = 0; i < n; ++i)
            std::scanf("%d", &init[i]);
        std::printf("Case %d: %d\n", ++tc, bbfs());
    }
    return 0;
}
==========
