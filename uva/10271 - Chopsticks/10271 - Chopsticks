Keyword
DP

Define d[i,j] as the partial sum of badness when [0..j]'th persons use [i..N-1]'th chopsticks (last N-i chopsticks). The recursive formula for it can be easily deduced. 

The following code using this idea runs in 0.218s in uva.
====================================================================================================
*/

#include <stdio.h>
#include <string.h>

#define MAX_EATERS 1008
#define MAX_STICKS 5000
#define INF 0x3f3f3f3f

int neaters, nsticks;
int stick[MAX_STICKS];
int dptable[MAX_STICKS][MAX_EATERS];	// record the total "badness"

int main()
{
	int i, j, test_case, badness, temp;
	scanf("%d", &test_case);
	while(test_case-- > 0)
	{
		scanf("%d%d", &neaters, &nsticks);
		neaters += 8;
		for(i = 0; i < nsticks; i++)
			scanf("%d", &stick[i]);
		memset(dptable, INF, sizeof(dptable));
		for(i = nsticks - 3; i >= 0; i--)
		{
			badness = (stick[i + 1] - stick[i]) * (stick[i + 1] - stick[i]);
			if(badness < dptable[i + 1][0])
				dptable[i][0] = badness;
			else
				dptable[i][0] = dptable[i + 1][0];
			for(j = 1; j < neaters; j++)
			{
				if(i + (j + 1) * 3 > nsticks)
					break;
				badness = (stick[i + 1] - stick[i]) * (stick[i + 1] - stick[i]) + dptable[i + 2][j - 1];
				if(badness < dptable[i + 1][j])
					dptable[i][j] = badness;
				else
					dptable[i][j] = dptable[i + 1][j];
			}
		}
		printf("%d\n", dptable[0][neaters - 1]);
	}
	return 0;
}

/*
====================================================================================================

To improve the performance, we notice that we don't need to store the whole DP table. In fact, we use only the next two columns of the current column in DP table. So we can tremendously reduce the space complexity and also the time complexity. 
The code in .cpp file runs in 0.075s in uva. Better than the previous one.
