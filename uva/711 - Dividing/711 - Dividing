Keyword:
subset sum

It can be seen as a kind of 0-1 knapsack problem. My code uses DP to solve it. 
The following code ran in 813MS in poj and in 2.486s. Acceptable but very poor.
====================================================================================================
#include <stdio.h>
#include <string.h>

int main()
{
	int i, j, k, tc = 0, marble[6], sum, half, cur_max;
	bool dptable[60001];
	while(scanf("%d%d%d%d%d%d", &marble[0], &marble[1], &marble[2], &marble[3], &marble[4], &marble[5]))
	{
		if(marble[0] == 0 && marble[1] == 0 && marble[2] == 0 && marble[3] == 0 && marble[4] == 0 && marble[5] == 0)
			break;
		for(sum = 0, i = 0; i < 6; i++)
			sum += marble[i]*(i+1);
		if((sum&1) == 1)
		{
			printf("Collection #%d:\nCan't be divided.\n\n", ++tc);
			continue;
		}
		half = sum/2;
		memset(dptable, false, sizeof(dptable));
		dptable[0] = true;
		cur_max = 0;
		for(i = 0; i < 6; i++)
		{
			if(marble[i] == 0)
				continue;
			for(j = cur_max; j >= 0; j--)
			{
				if(dptable[j] == true)
				{
					for(k = 1; k <= marble[i]; k++)
					{
						int tmp = j+(i+1)*k;
						if(tmp > half)
							break;
						else if(tmp == half)
							goto finished;
						dptable[tmp] = true;
						if(tmp > cur_max)
							cur_max = tmp;
					}
				}
			}
		}
		printf("Collection #%d:\nCan't be divided.\n\n", ++tc);
		continue;
finished:
		printf("Collection #%d:\nCan be divided.\n\n", ++tc);
	}
	return 0;
}
====================================================================================================

There's a way to reduce the time cost tremendously. That is, if the number of some kinds of marbles is larger than 6, then that number can be reduced to 6 or 7. (Divide those extra marbles pairwisely in both sides.) 
I don't know how to prove its correctness, but it's actually accepted in both poj and uva. It ran in 0MS in poj and in 0.015s in uva.
This code is in the cpp file.

Note: There are several wrong codes that are acceptable in poj and ran in 0MS in poj. However, all of them got WA in uva. 

Same problem:
	poj 1014, uva 711