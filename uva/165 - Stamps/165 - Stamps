Use backtracking on different numbers. (The first number is always 1.) (See the code below.)
We can also pre-calculate all results and then directly output the result when required, since the amount of test data is quite small here. (See the cpp file.)


====================================================================================================
In the cpp file: (pre-calculate results)
0.012s in uva
====================================================================================================


====================================================================================================
0.023s in uva
====================================================================================================
#include <stdio.h>
#include <string.h>

#define MAX 100

int h, k;
int n, result[8];

int cur_n, cur_result[8];

int max_sum;
int partial_sum[MAX];

void add_new_num(int new_num)
{
	int i, j, tmp;
	for(i = max_sum; i >= 0; i--)
	{
		if(partial_sum[i] != -1 && partial_sum[i] < h)
		{
			tmp = i;
			for(j = partial_sum[i]+1; j <= h; j++)
			{
				tmp += new_num;
				if(tmp >= MAX)
					break;
				if(partial_sum[tmp] == -1 || partial_sum[tmp] > j)
				{
					partial_sum[tmp] = j;
					if(tmp > max_sum)
						max_sum = tmp;
				}
			}
		}
	}
}

void dfs(int cur_depth)
{
	int i;
	int old_n = cur_n;
	int old_sum[MAX];
	memcpy(old_sum, partial_sum, sizeof(old_sum));
	for(i = cur_result[cur_depth-1]+1; i <= cur_n+1; i++)
	{
		cur_result[cur_depth] = i;
		add_new_num(i);
		while(partial_sum[cur_n+1] != -1)
			cur_n++;
		
		if(cur_depth < k-1)
			dfs(cur_depth+1);
		else if(cur_n > n)
		{
			n = cur_n;
			memcpy(result, cur_result, sizeof(result));
		}
		
		cur_n = old_n;
		memcpy(partial_sum, old_sum, sizeof(old_sum));
	}
}

int main()
{
	int i;
	while(scanf("%d%d", &h, &k), h || k)
	{
		if(h == 0 || k == 0)
			printf(" ->  0\n");
		else if(h == 1)
		{
			for(i = 1; i <= k; i++)
				printf("%3d", i);
			printf(" ->%3d\n", k);
		}
		else if(k == 1)
			printf("  1 ->  %d\n", h);
		else
		{
			n = 0;
			cur_n = h;
			cur_result[0] = 1;
			memset(partial_sum, -1, sizeof(partial_sum));
			partial_sum[0] = 0;
			for(i = 1; i <= h; i++)
				partial_sum[i] = i;
			max_sum = h;
			
			dfs(1);
			
			for(i = 0; i < k; i++)
				printf("%3d", result[i]);
			printf(" ->%3d\n", n);
		}
	}
	return 0;
}
====================================================================================================
