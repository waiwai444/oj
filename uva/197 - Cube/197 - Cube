solid geometry

A good problem, with relatively easy idea but quite complicated implementation. We can use backtracking. For a given initial placement of small cube A, we can get all possible assembly schemes by only translating cube A and rotating and translating other cubes. Note that other cubes except A can be transformed into themselves by rotation, so we must filter out those duplicate assembly schemes. It’s obvious that, after filtering out those duplicate schemes, we can obtain all assembly solutions without duplication and without those mere rotations of another solution. Hence, we can calculate all results once and apply them to different input test cases by some rotations of solutions. 

There’re 24 possible rotations of each small cube, including some duplications. 



====================================================================================================
The following code is my first version. It seems very ugly. The code in cpp file use the result pre-calculated by this code. 

To represent small cubes, I assign coordinates to each cell of the small cube. Then rotate those small cubes and translate them to each possible position during backtracking. 
We can map the input initial placement of A to a rotation scheme so that we can easily get the answers for a input test case from the pre-calculated solution. 
To avoid duplications of a small cube during rotation, we can map the rotation of the small cube into an integer by the coordinates of its cells. 

5.708s in uva (83/114)

In fact, we can avoid lots of computations during backtracking to reduce time cost tremendously. We can calculate all rotations and translations for all small cubes once and then use them during backtracking. But I don’t have time to improve this code along this way for this code. For better versions, see below.
====================================================================================================
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <map>
#include <string>

char cube[3][3][3];
int result_num;
char result[24][500][28];
bool valid_result[24];

struct Coordinate
{
	int l, r, c;
};

int cell_num[7] = {4, 3, 4, 4, 4, 4, 4};
Coordinate coord[7][4] = {
	{{0, 0, 0}, {0, 0, 1}, {0, 0, 2}, {1, 0, 0}},
	{{0, 0, 0}, {0, 0, 1}, {0, 1, 0}},
	{{0, 0, 0}, {0, 0, -1}, {0, 0, 1}, {0, 1, 0}},
	{{0, 0, 0}, {0, 1, 0}, {0, 1, 1}, {0, 2, 1}},
	{{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {1, 0, 0}},
	{{0, 0, 0}, {0, 0, 1}, {0, 1, 0}, {1, 1, 0}},
	{{0, 0, 0}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}}
};

std::map<std::string, int> init_key_map;

int rotate_scheme[24][3] = {
	{0, 0, 0},
	{1, 0, 0},
	{2, 0, 0},
	{3, 0, 0},
	{0, 1, 0},
	{1, 1, 0},
	{2, 1, 0},
	{3, 1, 0},
	{0, 2, 0},
	{1, 2, 0},
	{2, 2, 0},
	{3, 2, 0},
	{0, 3, 0},
	{1, 3, 0},
	{2, 3, 0},
	{3, 3, 0},
	{0, 0, 1},
	{1, 0, 1},
	{2, 0, 1},
	{3, 0, 1},
	{0, 0, 3},
	{1, 0, 3},
	{2, 0, 3},
	{3, 0, 3}
};

void init()
{
	init_key_map["aaa......a................."] = 0;
	init_key_map["a..a..a..a................."] = 1;
	init_key_map["aaa........a..............."] = 2;
	init_key_map["a..a..a........a..........."] = 3;
	init_key_map["aa........a........a......."] = 4;
	init_key_map["a..a........a........a....."] = 5;
	init_key_map["aa.......a........a........"] = 6;
	init_key_map["a..a.....a........a........"] = 7;
	init_key_map["..a......aaa..............."] = 8;
	init_key_map["......a..a..a..a..........."] = 9;
	init_key_map["a........aaa..............."] = 10;
	init_key_map["a........a..a..a..........."] = 11;
	init_key_map["a........a........aa......."] = 12;
	init_key_map["a........a........a..a....."] = 13;
	init_key_map[".a........a.......aa......."] = 14;
	init_key_map["...a........a.....a..a....."] = 15;
	init_key_map["aaaa......................."] = 16;
	init_key_map["aa..a..a..................."] = 17;
	init_key_map["..aaaa....................."] = 18;
	init_key_map["a..a..aa..................."] = 19;
	init_key_map["a..aaa....................."] = 20;
	init_key_map["aa.a..a...................."] = 21;
	init_key_map["aaa..a....................."] = 22;
	init_key_map[".a..a.aa..................."] = 23;
}

inline void do_rotate(int& x, int& y)	// rotate 90 degree
{
	int tmp = x;
	x = y;
	y = -tmp;
}

void rotate(Coordinate *coord, int num, int axis0, int axis1, int axis2)
{
	int i, j;
	for(i = 0; i < num; i++)
	{
		for(j = 0; j < axis0; j++)
			do_rotate(coord[i].r, coord[i].c);
		for(j = 0; j < axis1; j++)
			do_rotate(coord[i].l, coord[i].c);
		for(j = 0; j < axis2; j++)
			do_rotate(coord[i].l, coord[i].r);
	}
}

void rotate_to_face(Coordinate *coord, int num, int face)
{
	switch(face)
	{
		case 0:
			return;
		case 1:
			rotate(coord, num, 0, 1, 0);
			break;
		case 2:
			rotate(coord, num, 0, 2, 0);
			break;
		case 3:
			rotate(coord, num, 0, 3, 0);
			break;
		case 4:
			rotate(coord, num, 0, 0, 1);
			break;
		case 5:
			rotate(coord, num, 0, 0, 3);
			break;
	}
}

bool translate(Coordinate *coord, int num, int dir0, int dir1, int dir2)
{
	for(int i = 0; i < num; i++)
	{
		coord[i].l += dir0;
		coord[i].r += dir1;
		coord[i].c += dir2;
		if(coord[i].l < 0 || coord[i].l > 2 || coord[i].r < 0 || coord[i].r > 2 || coord[i].c < 0 || coord[i].c > 2)
			return false;
	}
	return true;
}

bool place(char cur_piece, Coordinate *coord, int num)
{
	int i;
	for(i = 0; i < num; i++)
	{
		char& cell = cube[coord[i].l][coord[i].r][coord[i].c];
		if(cell == 0)
			cell = cur_piece;
		else
			break;
	}
	if(i == num)
		return true;
	else
	{
		while(--i >= 0)
			cube[coord[i].l][coord[i].r][coord[i].c] = 0;
		return false;
	}
}

inline void remove(Coordinate *coord, int num)
{
	for(int i = 0; i < num; i++)
		cube[coord[i].l][coord[i].r][coord[i].c] = 0;
}

bool cmp_coord(const Coordinate& c1, const Coordinate& c2)
{
	if(c1.l != c2.l)
		return c1.l < c2.l;
	if(c1.r != c2.r)
		return c1.r < c2.r;
	if(c1.c != c2.c)
		return c1.c < c2.c;
	return false;
}

int get_rotation_key(Coordinate *coord, int num)
{
	int i, key = 0, min_l = coord[0].l, min_r = coord[0].r, min_c = coord[0].c;
	for(i = 1; i < num; i++)
	{
		if(coord[i].l < min_l)
			min_l = coord[i].l;
		if(coord[i].r < min_r)
			min_r = coord[i].r;
		if(coord[i].c < min_c)
			min_c = coord[i].c;
	}
	Coordinate new_coord[4];
	for(i = 0; i < num; i++)
	{
		new_coord[i].l = coord[i].l-min_l;
		new_coord[i].r = coord[i].r-min_r;
		new_coord[i].c = coord[i].c-min_c;
	}
	std::sort(new_coord, new_coord+num, cmp_coord);
	for(i = 0; i < num; i++)
	{
		key = 27*key+9*new_coord[i].l+3*new_coord[i].r+new_coord[i].c;
	}
	return key;
}

inline bool find_rotation_key(int rot_key[], int rot_key_num, int key)
{
	for(int i = 0; i < rot_key_num; i++)
		if(rot_key[i] == key)
			return true;
	return false;
}

void record_result()
{
	int c = 0;
	for(int i = 0; i < 3; i++)
		for(int j = 0; j < 3; j++)
			for(int k = 0; k < 3; k++)
				result[0][result_num][c++] = cube[i][j][k];
	result[0][result_num++][c] = '\0';
}

void assemble_piece(char cur_piece)
{
	int i, j, k, f, r;
	Coordinate target_coord[4];
	
	if(cur_piece == 'a')
	{
		for(i = 0; i < 2; i++)
			for(j = 0; j < 3; j++)
			{
				memcpy(target_coord, coord[0], sizeof(coord[0]));
				if(translate(target_coord, cell_num[0], i, j, 0))
				{
					place(cur_piece, target_coord, cell_num[0]);
					assemble_piece('b');
					remove(target_coord, cell_num[0]);
				}
			}
	}
	else
	{
		Coordinate rotated_coord[4];
		int rot_key[24];
		int rot_key_num = 0;
		for(f = 0; f < 6; f++)	// for each face
		{
			memcpy(rotated_coord, coord[cur_piece-'a'], sizeof(coord[cur_piece-'a']));
			rotate_to_face(rotated_coord, cell_num[cur_piece-'a'], f);
			for(r = 0; r < 4; r++)	// for each rotation on a face
			{
				if(r > 0)
					rotate(rotated_coord, cell_num[cur_piece-'a'], 1, 0, 0);
				// filter out duplicated rotations
				int key = get_rotation_key(rotated_coord, cell_num[cur_piece-'a']);
				if(find_rotation_key(rot_key, rot_key_num, key))
					continue;
				rot_key[rot_key_num++] = key;
				
				for(i = 0; i < 3; i++)
					for(j = 0; j < 3; j++)
						for(k = 0; k < 3; k++)	// for each cell in the cube
						{
							memcpy(target_coord, rotated_coord, sizeof(coord[cur_piece-'a']));
							if(translate(target_coord, cell_num[cur_piece-'a'], i, j, k))
							{
								if(place(cur_piece, target_coord, cell_num[cur_piece-'a']))
								{
									if(cur_piece < 'g')
										assemble_piece(cur_piece+1);
									else
										record_result();
									remove(target_coord, cell_num[cur_piece-'a']);
									if(cur_piece == 'g')
										return;
								}
							}
						}
			}
		}
	}
}

int find_init_idx(char input[])
{
	int i, j, k, c, min_l, min_r, min_c;
	min_l = min_r = min_c = 3;
	for(c = i = 0; i < 3; i++)
		for(j = 0; j < 3; j++)
			for(k = 0; k < 3; k++)
			{
				if(input[c] == 'a')
				{
					if(i < min_l)
						min_l = i;
					if(j < min_r)
						min_r = j;
					if(k < min_c)
						min_c = k;
				}
				c++;
			}
	if(min_l > 0)
		for(i = 0; i < 28; i++)
			if(input[i] == 'a')
			{
				input[i] = '.';
				input[i-9*min_l] = 'a';
			}
	if(min_r > 0)
		for(i = 0; i < 28; i++)
			if(input[i] == 'a')
			{
				input[i] = '.';
				input[i-3*min_r] = 'a';
			}
	if(min_c > 0)
		for(i = 0; i < 28; i++)
			if(input[i] == 'a')
			{
				input[i] = '.';
				input[i-min_c] = 'a';
			}
	return init_key_map[input];
}

void rotate_all_result(int idx)
{
	int i, r;
	char t0, t1, t2;
	memcpy(result[idx], result[0], sizeof(result[0]));
	for(r = 0; r < result_num; r++)
	{
		for(i = 0; i < rotate_scheme[idx][2]; i++)
		{
			t0 = result[idx][r][0], t1 = result[idx][r][1], t2 = result[idx][r][2];
			result[idx][r][0] = result[idx][r][6], result[idx][r][1] = result[idx][r][7], result[idx][r][2] = result[idx][r][8];
			result[idx][r][6] = result[idx][r][24], result[idx][r][7] = result[idx][r][25], result[idx][r][8] = result[idx][r][26];
			result[idx][r][24] = result[idx][r][18], result[idx][r][25] = result[idx][r][19], result[idx][r][26] = result[idx][r][20];
			result[idx][r][18] = t0, result[idx][r][19] = t1, result[idx][r][20] = t2;
			t0 = result[idx][r][3], t1 = result[idx][r][4], t2 = result[idx][r][5];
			result[idx][r][3] = result[idx][r][15], result[idx][r][4] = result[idx][r][16], result[idx][r][5] = result[idx][r][17];
			result[idx][r][15] = result[idx][r][21], result[idx][r][16] = result[idx][r][22], result[idx][r][17] = result[idx][r][23];
			result[idx][r][21] = result[idx][r][9], result[idx][r][22] = result[idx][r][10], result[idx][r][23] = result[idx][r][11];
			result[idx][r][9] = t0, result[idx][r][10] = t1, result[idx][r][11] = t2;
		}
		for(i = 0; i < rotate_scheme[idx][1]; i++)
		{
			t0 = result[idx][r][0], t1 = result[idx][r][3], t2 = result[idx][r][6];
			result[idx][r][0] = result[idx][r][18], result[idx][r][3] = result[idx][r][21], result[idx][r][6] = result[idx][r][24];
			result[idx][r][18] = result[idx][r][20], result[idx][r][21] = result[idx][r][23], result[idx][r][24] = result[idx][r][26];
			result[idx][r][20] = result[idx][r][2], result[idx][r][23] = result[idx][r][5], result[idx][r][26] = result[idx][r][8];
			result[idx][r][2] = t0, result[idx][r][5] = t1, result[idx][r][8] = t2;
			t0 = result[idx][r][1], t1 = result[idx][r][4], t2 = result[idx][r][7];
			result[idx][r][1] = result[idx][r][9], result[idx][r][4] = result[idx][r][12], result[idx][r][7] = result[idx][r][15];
			result[idx][r][9] = result[idx][r][19], result[idx][r][12] = result[idx][r][22], result[idx][r][15] = result[idx][r][25];
			result[idx][r][19] = result[idx][r][11], result[idx][r][22] = result[idx][r][14], result[idx][r][25] = result[idx][r][17];
			result[idx][r][11] = t0, result[idx][r][14] = t1, result[idx][r][17] = t2;
		}
		for(i = 0; i < rotate_scheme[idx][0]; i++)
		{
			t0 = result[idx][r][0], t1 = result[idx][r][9], t2 = result[idx][r][18];
			result[idx][r][0] = result[idx][r][6], result[idx][r][9] = result[idx][r][15], result[idx][r][18] = result[idx][r][24];
			result[idx][r][6] = result[idx][r][8], result[idx][r][15] = result[idx][r][17], result[idx][r][24] = result[idx][r][26];
			result[idx][r][8] = result[idx][r][2], result[idx][r][17] = result[idx][r][11], result[idx][r][26] = result[idx][r][20];
			result[idx][r][2] = t0, result[idx][r][11] = t1, result[idx][r][20] = t2;
			t0 = result[idx][r][1], t1 = result[idx][r][10], t2 = result[idx][r][19];
			result[idx][r][1] = result[idx][r][3], result[idx][r][10] = result[idx][r][12], result[idx][r][19] = result[idx][r][21];
			result[idx][r][3] = result[idx][r][7], result[idx][r][12] = result[idx][r][16], result[idx][r][21] = result[idx][r][25];
			result[idx][r][7] = result[idx][r][5], result[idx][r][16] = result[idx][r][14], result[idx][r][25] = result[idx][r][23];
			result[idx][r][5] = t0, result[idx][r][14] = t1, result[idx][r][23] = t2;
		}
	}
}

int main()
{
	char input[28];
	assemble_piece('a');
	valid_result[0] = true;
	init();
	while(scanf("%s", input) != EOF)
	{
		int idx = find_init_idx(input);
		if(!valid_result[idx])
		{
			rotate_all_result(idx);
			valid_result[idx] = true;
		}
		for(int i = 0; i < result_num; i++)
			printf("%s\n", result[idx][i]);
		printf("\n");
	}
	return 0;
}
====================================================================================================



====================================================================================================
The following code represents cube by the string of length 27, like those in the problem text. It calculates all rotations and translations before starting backtracking, so it’s much faster than the previous code. 
0.132s in uva
====================================================================================================
#include <stdio.h>
#include <string.h>
#include <vector>
#include <set>
#include <map>
#include <string>

struct Cube
{
	char cell[28];
	int used;
};

void cube_set_used(Cube& cube)
{
	cube.used = 0;
	for(int i = 0; i < 27; i++)
		if(cube.cell[i] != 0)
			cube.used |= 1<<(26-i);
}

char init_figure[7][28] = {
	"aa.a..a....................",
	"bb.b.......................",
	"ccc.c......................",
	"d..dd..d...................",
	"ee.e.....e.................",
	"ff.f........f..............",
	".g.gg.......g.............."
};

std::vector<Cube> figure_set[7];

std::vector<Cube> result[24];
bool result_valid[24];

int rotation_step[3][27] = {
	{2, 5, 8, 1, 4, 7, 0, 3, 6, 11, 14, 17, 10, 13, 16, 9, 12, 15, 20, 23, 26, 19, 22, 25, 18, 21, 24},	// x (1st dim)
	{2, 11, 20, 5, 14, 23, 8, 17, 26, 1, 10, 19, 4, 13, 22, 7, 16, 25, 0, 9, 18, 3, 12, 21, 6, 15, 24},	// y (2nd dim)
	{18, 19, 20, 9, 10, 11, 0, 1, 2, 21, 22, 23, 12, 13, 14, 3, 4, 5, 24, 25, 26, 15, 16, 17, 6, 7, 8}	// z (3rd dim)
};

int all_rotations[24][27];

int rotation_scheme[24][3] = {
	{0, 0, 0}, {1, 0, 0}, {2, 0, 0}, {3, 0, 0},
	{0, 1, 0}, {1, 1, 0}, {2, 1, 0}, {3, 1, 0},
	{0, 2, 0}, {1, 2, 0}, {2, 2, 0}, {3, 2, 0},
	{0, 3, 0}, {1, 3, 0}, {2, 3, 0}, {3, 3, 0},
	{0, 0, 1}, {1, 0, 1}, {2, 0, 1}, {3, 0, 1},
	{0, 0, 3}, {1, 0, 3}, {2, 0, 3}, {3, 0, 3}
};

void rotate(int rot[], char axis)
{
	int tmp[27];
	for(int i = 0; i < 27; i++)
		tmp[rotation_step[axis-'x'][i]] = rot[i];
	memcpy(rot, tmp, sizeof(tmp));
}

void get_all_rotations()
{
	int i, j;
	for(i = 0; i < 27; i++)
		all_rotations[0][i] = i;
	for(i = 1; i < 24; i++)
	{
		memcpy(all_rotations[i], all_rotations[0], sizeof(all_rotations[0]));
		for(j = 0; j < rotation_scheme[i][2]; j++)
			rotate(all_rotations[i], 'z');
		for(j = 0; j < rotation_scheme[i][1]; j++)
			rotate(all_rotations[i], 'y');
		for(j = 0; j < rotation_scheme[i][0]; j++)
			rotate(all_rotations[i], 'x');
	}
}

bool do_translate(Cube& cube, int dx, int dy, int dz)
{
	int i, x, y, z;
	Cube tmp;
	memset(tmp.cell, 0, sizeof(tmp.cell));
	for(i = 0; i < 27; i++)
	{
		if(cube.cell[i] != 0)
		{
			x = i/9; y = i%9/3; z = i%3;
			x += dx; y += dy; z += dz;
			if(x < 0 || x > 2 || y < 0 || y > 2 || z < 0 || z > 2)
				return false;
			tmp.cell[9*x+3*y+z] = cube.cell[i];
		}
	}
	memcpy(cube.cell, tmp.cell, sizeof(tmp.cell));
	return true;
}

void translate_all(int figure_idx, const Cube& cube, std::set<int>& rec)
{
	Cube tmp;
	int dx, dy, dz;
	for(dx = -2; dx <= 2; dx++)
		for(dy = -2; dy <= 2; dy++)
			for(dz = -2; dz <= 2; dz++)
			{
				tmp = cube;
				if(do_translate(tmp, dx, dy, dz))	// translate small cube
				{
					cube_set_used(tmp);
					if(rec.insert(tmp.used).second == true)
						figure_set[figure_idx].push_back(tmp);
				}
			}
}

void get_all_figures()
{
	Cube cube;
	int i, j, k;
	
	get_all_rotations();
	
	for(i = 0; i < 7; i++)
	{
		std::set<int> rec;
		
		strcpy(cube.cell, init_figure[i]);
		for(j = 0; j < 27; j++)
			if(cube.cell[j] == '.')
				cube.cell[j] = 0;
		cube_set_used(cube);
		translate_all(i, cube, rec);
		if(i > 0)
		{
			for(j = 1; j < 24; j++)	// rotate small cube
			{
				for(k = 0; k < 27; k++)
					cube.cell[all_rotations[j][k]] = figure_set[i][0].cell[k];
				translate_all(i, cube, rec);
			}
		}
	}
}

inline void place(Cube& new_cube, const Cube& cur_cube, const Cube& figure)
{
	for(int i = 0; i < 27; i++)
		new_cube.cell[i] = cur_cube.cell[i] | figure.cell[i];
	new_cube.used = cur_cube.used | figure.used;
}

void assemble_piece(Cube& cur_cube, char cur_piece)
{
	int i;
	Cube new_cube;
	std::vector<Cube>& figures = figure_set[cur_piece-'a'];
	size_t size = figures.size();
	if(cur_piece == 'a')
		for(i = 0; i < size; i++)
		{
			place(new_cube, cur_cube, figures[i]);
			assemble_piece(new_cube, 'b');
		}
	else
	{
		for(i = 0; i < size; i++)
		{
			if((cur_cube.used & figures[i].used) == 0)
			{
				place(new_cube, cur_cube, figures[i]);
				if(cur_piece == 'g')
				{
					new_cube.cell[27] = '\0';
					result[0].push_back(new_cube);
					return;
				}
				else
					assemble_piece(new_cube, cur_piece+1);
			}
		}
	}
}

std::map<std::string, int> init_key_map;

void init()
{
	init_key_map["aa.a..a...................."] = 0;
	init_key_map["aaa..a....................."] = 1;
	init_key_map[".a..a.aa..................."] = 2;
	init_key_map["a..aaa....................."] = 3;
	init_key_map["a..a..a..a................."] = 4;
	init_key_map["aaa........a..............."] = 5;
	init_key_map["a..a..a........a..........."] = 6;
	init_key_map["aaa......a................."] = 7;
	init_key_map["aa..a..a..................."] = 8;
	init_key_map["..aaaa....................."] = 9;
	init_key_map["a..a..aa..................."] = 10;
	init_key_map["aaaa......................."] = 11;
	init_key_map["a........a..a..a..........."] = 12;
	init_key_map["..a......aaa..............."] = 13;
	init_key_map["......a..a..a..a..........."] = 14;
	init_key_map["a........aaa..............."] = 15;
	init_key_map["a........a........aa......."] = 16;
	init_key_map["a........a........a..a....."] = 17;
	init_key_map[".a........a.......aa......."] = 18;
	init_key_map["...a........a.....a..a....."] = 19;
	init_key_map["aa.......a........a........"] = 20;
	init_key_map["a..a.....a........a........"] = 21;
	init_key_map["aa........a........a......."] = 22;
	init_key_map["a..a........a........a....."] = 23;
	
	get_all_figures();
}

int find_init_idx(char input[])
{
	int i, j, k, c, min_x, min_y, min_z;
	min_x = min_y = min_z = 3;
	for(c = i = 0; i < 3; i++)
		for(j = 0; j < 3; j++)
			for(k = 0; k < 3; k++)
			{
				if(input[c] == 'a')
				{
					if(i < min_x)
						min_x = i;
					if(j < min_y)
						min_y = j;
					if(k < min_z)
						min_z = k;
				}
				c++;
			}
	if(min_x > 0)
		for(i = 0; i < 28; i++)
			if(input[i] == 'a')
			{
				input[i] = '.';
				input[i-9*min_x] = 'a';
			}
	if(min_y > 0)
		for(i = 0; i < 28; i++)
			if(input[i] == 'a')
			{
				input[i] = '.';
				input[i-3*min_y] = 'a';
			}
	if(min_z > 0)
		for(i = 0; i < 28; i++)
			if(input[i] == 'a')
			{
				input[i] = '.';
				input[i-min_z] = 'a';
			}
	return init_key_map[input];
}

int main()
{
	int i, j;
	char input[28];
	Cube cube;
	memset(cube.cell, 0, sizeof(cube.cell));
	cube.used = 0;
	init();
	assemble_piece(cube, 'a');
	result_valid[0] = true;
	while(scanf("%s", input) != EOF)
	{
		int idx = find_init_idx(input);
		if(!result_valid[idx])
		{
			result[idx].resize(result[0].size());
			for(i = 0; i < result[0].size(); i++)
			{
				for(j = 0; j < 27; j++)
				{
					result[idx][i].cell[j] = result[0][i].cell[all_rotations[idx][j]];
				}
				result[idx][i].cell[27] = '\0';
			}
			result_valid[idx] = true;
		}
		for(i = 0; i < result[idx].size(); i++)
			printf("%s\n", result[idx][i].cell);
		printf("\n");
	}
	return 0;
}
====================================================================================================



====================================================================================================
The code in cpp file uses the result pre-calculated by my first code.

0.022s in uva (5/115)
====================================================================================================
====================================================================================================


