Separate the 4 lists into 2 groups, and then calculate the sums of numbers in each group separately. After that, we get 2 lists of sums (at least conceptual). Here a faster method is to use a hash table to store the numbers in the first sum list, and then find in the hash table the opposite numbers of the sums in the second sum list. Hash table is just a large array with open addressing.

0.760s

====================================================================================================
The following is the method resembling the classic algorithm for 2-list version, where we sort the 2 lists and then traverse them in the opposite directions. The only difference is that here we traverse the the two sum lists.

1.530s
====================================================================================================
#include <algorithm>
#include <stdio.h>

int n;
int li[4][4000];
int sum[2][4000*4000];

long long solve()
{
    int i, j, k, l, n2 = n*n;
    long long res = 0;

    for (i = 0; i < n; ++i)
        for (j = 0; j < n; ++j)
        {
            sum[0][i*n+j] = li[0][i]+li[1][j];
            sum[1][i*n+j] = li[2][i]+li[3][j];
        }
    std::sort(sum[0], sum[0]+n2);
    std::sort(sum[1], sum[1]+n2);
    k = l = 1;
    for (i = 0, j = n2-1; i < n2 && j >= 0;)
    {
        while (i < n2-1 && sum[0][i] == sum[0][i+1])
            ++i, ++k;
        while (j > 0 && sum[1][j] == sum[1][j-1])
            --j, ++l;
        int s = sum[0][i]+sum[1][j];
        if (s == 0)
        {
            res += (long long)k*l;
            ++i, --j;
            k = l = 1;
        }
        else if (s > 0)
        {
            --j;
            l = 1;
        }
        else
        {
            ++i;
            k = 1;
        }
    }

    return res;
}

int main()
{
    int i, t;
    long long ans;
    scanf("%d", &t);
    while (t--)
    {
        scanf("%d", &n);
        for (i = 0; i < n; ++i)
            scanf("%d%d%d%d", &li[0][i], &li[1][i], &li[2][i], &li[3][i]);
        ans = solve();
        printf("%lld\n", ans);
        if (t)
            putchar('\n');
    }
    return 0;
}
====================================================================================================
