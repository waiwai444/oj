This problem requires us to split an integer N into the sum of different smaller integers, with their product maximum.

We can generate such an integer sequence as follows:
  1. Find a k such that 2+3+...+k <= N < 2+3+...+k+(k+1).
  2. Let p = N-(2+3+...+k), we have 0 <= p < k+1. Denote set {2,3,...,k} as A.
    2.1. If p = 0, then we finish with A.
    2.2. If 1 <= p < k, the answer is A-{k+1-p}+{k+1}.
    2.3. If p = k, the answer is A-{2}+{k+2}.

This algorithm can be regarded as some kind of greedy algorithm, since we split the integer N into integers as small as possible (>1) to make the product maximum.

The following is the proof of the correctness of this algorithm. [1]
==========
Proof:

Assume N = a1+a2+...+a[t], with a1*a2*...*a[t] maximum, and a1 < a2 < ... < a[t]. N >= 5.

First, we prove some properties of such a maximum product sequence.
1. a1 can only be 2 or 3.
  If a1 = 1, then we can remove it from the sequence and add it to a[t], and the resulting product will be larger.
  If a1 >= 4, then we can replace a1, a2 by 2, a1-1, a2-1, since 2*(a1-1)*(a2-1)-a1*a2 = (a1-2)*a2-2*a1+2 > a1^2-4*a1+2 = a1*(a1-4)+2 > 0.
2. For all i > 1, we have a[i]-a[i-1] <= 2.
  If for some i > 1, a[i]-a[i-1] > 2, then we can replace a[i-1], a[i] by a[i-1]+1, a[i]-1. This is because (a[i-1]+1)*(a[i]-1)-a[i-1]*a[i] = a[i]-a[i-1]-1 > 0.
3. There exists at most one i that a[i]-a[i-1] = 2.
  If a[i]-a[i-1] = a[j]-a[j-1] = 2, i < j, then we need to replace a[i-1], a[j] by a[i-1]+1, a[j]-1. This is because (a[i-1]+1)*(a[j]-1)-a[i-1]*a[j] = a[j]-a[i-1]-1 > 0.
4. If a1 = 3, and there exists an i > 1 that a[i]-a[i-1] = 2, then i = t (the last one).
  If there exists an i < t that a[i]-a[i-1] = 2, then we can add the 2 and replace a[i+1] by a[i+1]-2, since 2*(a[i+1]-2)-a[i+1] = a[i+1]-4 > 0.

Now we can show that the maximum product sequence can be constructed by this algorithm.
1. If p = 0, that is, N = 2+3+...+k, then:
  1.1 If the maximum sequence starts with 2 and has a hole x <= k (none of a[i] equals x), then it must be combined with some other number to get some larger number, which will make another hole.
  1.2 If the maximum sequence starts with 3 and doesn't have a hole <= k, then we have nowhere to place 2.
  1.3 If the maximum sequence starts with 3 and has a hole x <= k, then x can only be k-1 or k. If x = k, we can add 2 and k, and a hole of size 2 will come up (k-1, k+2), or if x = k-1, we can add 2 and k-1, and a hole will come up in the place other than between the last two numbers (k-2, k, k+1).
  Neither case is possible. So, only the set A = {2, 3, ..., k} is the sequence we required.
2. If 1 <= p < k, N = 2+3+...+k+p, then:
  2.1 If the maximum sequence starts with 2 and doesn't have a hole <= k, then we have p remained, but it's less than k. Impossible.
  2.2 If the maximum sequence starts with 2 and has a hole x <= k, then we have x+p remained. x+p must equal to k+1. So x = k+1-p.
  2.3 If the maximum sequence starts with 3 and doesn't have a hole <= k, then we have 2+p remained. If 2+p = k+1, we have p = k-1, k+1-p = 2. If 2+p = k+2, we have p = k, contradictory.
  2.4 If the maximum sequence starts with 3 and has a hole x <= k, we have 2+x+p remained. x can only be k, and 2+x+p must equal to k+1. Then p = -1, impossible.
  Thus, all possible cases can be represented as A-{k+1-p}+{k+1}.
3. If p = k, N = 2+3+...+k+k, then:
  3.1 If the maximum sequence starts with 2 and doesn't have a hole <= k, then we have k remained. Impossible.
  3.2 If the maximum sequence starts with 2 and has a hole x <= k, then we have x+k remained. x+k > k+2. Impossible.
  3.3 If the maximum sequence starts with 3 and doesn't have a hole <= k, then we have 2+k remained. It's a possible case.
  3.4 If the maximum sequence starts with 3 and has a hole x <= k, then we have 2+x+k remained. x can only be k, and 2+x+k must equal to k+1. k = -1, impossible.
  So, the only case is A-{2}+{k+2}.

==========

[1] http://poj.org/showmessage?message_id=13543


This problem can also be solved by a dynamic programming method, but it's much more inefficient, and requires big integer arithmetics.


0.000s in uva 668
0.003s in la 5661
0.000s in poj 1032
