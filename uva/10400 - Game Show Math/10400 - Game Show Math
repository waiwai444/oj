
====================================================================================================
The idea of the following code is to record all valid intermediate values with the operator to reach it, and finally to check if it will reach the target value. 
For the simplicity of printing, my code executes the above procedure reversely, i.e. from the target value to the first number. 

Different implementations will lead to significantly different result. I once used std::map to store values and it ran in uva in 7.352s. Very slow. But when I use the c-style array to store values, it ran in 0.192s in uva. 
Maybe the memory allocation when using std::map cause large amounts of time, or the iterator of std::map is much slower than the traversal of c-style array. 
====================================================================================================
#include <stdio.h>
#include <string.h>

#define MAX 32000

int n, num[100], target;
char table[100][MAX*2+1];

inline int table_idx(int value)
{
	return value+MAX;
}

void solve()
{
	if(n == 1)
	{
		if(num[0] == target)
			printf("%d=%d\n", target, target);
		else
			printf("NO EXPRESSION\n");
		return;
	}
	
	int i, x, y;
	memset(table, 0, sizeof(table));
	
	table[n-1][table_idx(target)] = 1;	// any value except 0
	for(i = n-2; i >= 0; i--)
	{
		for(x = -MAX; x <= MAX; x++)
		{
			if(table[i+1][table_idx(x)] == 0)
				continue;
			if((y = x-num[i+1]) >= -MAX)
				table[i][table_idx(y)] = '+';
			if((y = x+num[i+1]) <= MAX)
				table[i][table_idx(y)] = '-';
			if(x%num[i+1] == 0)
				table[i][table_idx(x/num[i+1])] = '*';
			y = x*num[i+1];
			if(y >= -MAX && y <= MAX)
				table[i][table_idx(y)] = '/';
		}
	}

	if(table[0][table_idx(num[0])] == 0)
	{
		printf("NO EXPRESSION\n");
		return;
	}
	
	x = num[0];
	for(i = 0; i < n-1; i++)
	{
		printf("%d%c", num[i], table[i][table_idx(x)]);
		switch(table[i][table_idx(x)])
		{
		case '+':
			x += num[i+1];
			break;
		case '-':
			x -= num[i+1];
			break;
		case '*':
			x *= num[i+1];
			break;
		case '/':
			x /= num[i+1];
		}
	}
	printf("%d=%d\n", num[n-1], target);
}

int main()
{
	int i, tc;
	scanf("%d", &tc);
	while(tc--)
	{
		scanf("%d", &n);
		for(i = 0; i < n; i++)
			scanf("%d", &num[i]);
		scanf("%d", &target);
		solve();
	}
	return 0;
}
====================================================================================================


====================================================================================================
After carefully thinking, I found that the above code is in fact equivalent to BFS, since all valid intermediate values are calculated. So we can just use DFS here to replace BFS. The DFS will be more efficient than BFS here. And also, the implementation of DFS will be much more easier than that of BFS. 
The code in cpp file uses DFS. 

0.086s in uva
====================================================================================================
