Keyword:
submatrix sum

====================================================================================================
The following code uses the brute-force method whose time complexity is O(n^6). Since the magnitude of the test data set is small, it still ran in 0.022s in uva.
====================================================================================================
#include <stdio.h>
#include <string.h>

int n;
char matrix[25][26];

int main()
{
	int i, j, tc;
	scanf("%d", &tc);
	while(tc--)
	{
		scanf("%s", matrix[0]);
		n = strlen(matrix[0]);
		for(i = 1; i < n; i++)
			scanf("%s", matrix[i]);
		
		int max_size = 0;
		int r1, r2, c1, c2;
		for(r1 = 0; r1 < n; r1++)
		{
			for(r2 = r1; r2 < n; r2++)
			{
				for(c1 = 0; c1 < n; c1++)
				{
					for(c2 = c1; c2 < n; c2++)
					{
						int size = (c2-c1+1)*(r2-r1+1);
						if(size <= max_size)
							continue;
						for(i = r1; i <= r2; i++)
							for(j = c1; j <= c2; j++)
							{
								if(matrix[i][j] == '0')
								{
									c1 = j;
									goto finished;
								}
							}
						if(size > max_size)
							max_size = size;
					}
				finished:
					;
				}
			}
		}
		printf("%d\n", max_size);
		if(tc > 0)
			printf("\n");
	}
	return 0;
}
====================================================================================================


====================================================================================================
The following code is O(n^3). It transforms this problem to the maximum submatrix problem. It first records the partial sum of each column from the first row to the current row. Then it uses a double-loop to traverse all row combination. And in this double-loop is another loop that traverse the column from left to right to find the current maximum submatrix by DP.
But since the magnitude of this problem is relatively small, it ran in 0.025s in uva, which is slower than other algorithm of mine (O(n^6) and O(n^4)). 
====================================================================================================
#include <stdio.h>
#include <string.h>

int n;
int matrix[25][25];
int col_sum[25][25];

int main()
{
	int i, j, k, tc;
	char line[26];
	scanf("%d", &tc);
	while(tc--)
	{
		scanf("%s", line);
		n = strlen(line);
		for(i = 0; i < n; i++)
			if(line[i] == '1')
				matrix[0][i] = 1;
			else
				matrix[0][i] = -10000;
		for(i = 1; i < n; i++)
		{
			scanf("%s", line);
			for(j = 0; j < n; j++)
				if(line[j] == '1')
					matrix[i][j] = 1;
				else
					matrix[i][j] = -10000;
		}
		memset(col_sum, 0, sizeof(col_sum));
		
		for(i = 0; i < n; i++)
			col_sum[0][i] = matrix[0][i];
		for(i = 0; i < n; i++)
			for(j = 1; j < n; j++)
				col_sum[j][i] = col_sum[j-1][i]+matrix[j][i];
		
		int max_size = 0;
		int size;
		for(i = 0; i < n; i++)
		{
			for(j = i; j < n; j++)
			{
				size = 0;
				for(k = 0; k < n; k++)
				{
					size += col_sum[j][k]-(i > 0 ? col_sum[i-1][k] : 0);
					if(size > max_size)
						max_size = size;
					else if(size < 0)
						size = 0;
				}
			}
		}
		
		printf("%d\n", max_size);
		if(tc > 0)
			printf("\n");
	}
	return 0;
}
====================================================================================================


The code in cpp file is also brute-force, except that it records the number of 1's in rectangle ((0,0),(i,j)). Its time complexity is O(n^4). It ran in 0.018s in uva. 


