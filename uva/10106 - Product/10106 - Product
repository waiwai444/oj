Keyword:
big number

My code using the naive multiplication algorithm ran in 0.019s in uva.

====================================================================================================
The time complexity of the naive multiplication algorithm is O(n^2). A faster algorithm using the FFT runs in O(nlogn) [1]. I implemented it as the following code. 
However, it ran in 0.022s in uva. Almost the same as the naive algorithm. The reason may be that my implementation is not so optimized (the constant factor of my implementation is big), and the test data set in uva is not large enough to show the efficiency of the FFT.
====================================================================================================
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <complex>

#define PI 3.14159265358979324

inline int round_double(double n)
{
    return n >= 0 ? (int)(n+0.5) : (int)(n-0.5);
}

unsigned int bit_reversed_increment(unsigned int a, unsigned int len)
{
    unsigned int mask = 1<<(len-1);
    a ^= mask;
    if((a&mask) != 0)
        return a;
    mask >>= 1;
    while(mask > 0 && (a&mask) != 0)
    {
        a ^= mask;
        mask >>= 1;
    }
    if(mask > 0)
        a ^= mask;
    return a;
}

void bit_reverse_copy(std::complex<double> *in, unsigned int n, unsigned int ndigits, std::complex<double>* out)   // o(nlogn), n should be power of 2
{
    unsigned int a = 0;
    for(unsigned int k = 0; k < n; k++)
    {
        out[k] = in[a];
        a = bit_reversed_increment(a, ndigits);
    }
}

void iterative_fft(std::complex<double> *in, unsigned int n, std::complex<double> *out)   // o(nlogn), n should be power of 2
{
    unsigned int s, m, k, j, ndigits = sizeof(unsigned int)*8;
    unsigned int mask = 1<<(ndigits-1);
    while((n&mask) == 0)
    {
        mask >>= 1;
        ndigits--;
    }
    ndigits--;
    bit_reverse_copy(in, n, ndigits, out);

    for(s = 1; s <= ndigits; s++)
    {
        m = 1<<s;
        std::complex<double> omiga_m(cos(2*PI/m), sin(2*PI/m));
        std::complex<double> omiga, t, u;
        for(k = 0; k < n; k += m)
        {
            omiga = 1;
            for(j = 0; j < m/2; j++)
            {
                t = omiga*out[k+j+m/2];
                u = out[k+j];
                out[k+j] = u+t;
                out[k+j+m/2] = u-t;
                omiga = omiga*omiga_m;
            }
        }
    }
}

class BigUInt
{
    char digit[500];
    int ndigits;
public:
    BigUInt() : ndigits(0) {}

    void get_from_str(char *str)
    {
        int i = 0, len = strlen(str);
        while(i < len && str[i] == '0')
            i++;
        ndigits = len-i;
        while(i < len)
        {
            digit[len-i-1] = str[i]-'0';
            i++;
        }
    }
    void reset() { ndigits = 0; }

    BigUInt operator *(const BigUInt& num)
    {
        BigUInt result;
        int i, n = 1;
        while(n < ndigits)
            n <<= 1;
        while(n < num.ndigits)
            n <<= 1;
        n <<= 1;
        std::complex<double> *a, *b, *dft_a, *dft_b, *dft_r;
        a = new std::complex<double>[n];
        b = new std::complex<double>[n];
        for(i = 0; i < ndigits; i++)
            a[i] = digit[i];
        for(i = ndigits; i < n; i++)
            a[i] = 0;
        for(i = 0; i < num.ndigits; i++)
            b[i] = num.digit[i];
        for(i = num.ndigits; i < n; i++)
            b[i] = 0;

        dft_a = new std::complex<double>[n];
        dft_b = new std::complex<double>[n];
        dft_r = new std::complex<double>[n];
        iterative_fft(a, n, dft_a);
        iterative_fft(b, n, dft_b);
        for(i = 0; i < n; i++)
            dft_a[i] = dft_a[i]*dft_b[i];
        for(i = 1; i < n/2; i++)
        {
            std::complex<double> tmp = dft_a[i];
            dft_a[i] = dft_a[n-i];
            dft_a[n-i] = tmp;
        }
        iterative_fft(dft_a, n, dft_r);

        for(i = 0; i < n; i++)
            result.digit[i] = 0;
        for(i = 0; i < n; i++)
        {
            int d = round_double(dft_r[i].real()/n);
            int j = i;
            while(d > 0)
            {
                result.digit[j] += d%10;
                if(result.digit[j] >= 10)
                {
                    result.digit[j] -= 10;
                    result.digit[j+1]++;
                }
                d /= 10;
                j++;
            }
        }
        result.ndigits = n;
        while(result.ndigits > 0 && result.digit[result.ndigits-1] == 0)
            result.ndigits--;

        delete[] a;
        delete[] b;
        delete[] dft_a;
        delete[] dft_b;
        delete[] dft_r;
        return result;
    }

    friend void println_biguint(const BigUInt& num);
};

void println_biguint(const BigUInt& num)
{
    int i;
    if(num.ndigits == 0)
    {
        printf("0\n");
        return;
    }
    char output[501];
    for(i = num.ndigits-1; i >= 0; i--)
        output[num.ndigits-1-i] = num.digit[i]+'0';
    output[num.ndigits] = '\0';
    printf("%s\n", output);
}

BigUInt x, y, r;

int main()
{
    int i, len;
    char line[300];
    while(scanf("%s", line) != EOF)
    {
        x.get_from_str(line);
        scanf("%s", line);
        y.get_from_str(line);

        r = x*y;
        println_biguint(r);
        x.reset();
        y.reset();
    }
    return 0;
}
====================================================================================================

[1] Introduction to Algorithm, Second Edition. T.H. Cormen, C.E. Leiserson, R.L. Rivest, C. Stein. The MIT Press.

